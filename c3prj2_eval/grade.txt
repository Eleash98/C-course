Grading at Sun Jul 26 21:09:48 UTC 2020
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==221== Memcheck, a memory error detector
==221== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==221== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==221== Command: ./test-eval inp.1.txt
==221== Parent PID: 220
==221== 
==221== Invalid read of size 8
==221==    at 0x401A09: is_straight_at (eval.c:107)
==221==    by 0x402968: describe_hand (test-eval.c:49)
==221==    by 0x402D0E: main (test-eval.c:116)
==221==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==221==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==221==    by 0x4010B5: add_card_to (deck-c4.c:29)
==221==    by 0x403592: hand_from_string (input.c:49)
==221==    by 0x402C93: main (test-eval.c:110)
==221== 
==221== Invalid read of size 4
==221==    at 0x401A0C: is_straight_at (eval.c:107)
==221==    by 0x402968: describe_hand (test-eval.c:49)
==221==    by 0x402D0E: main (test-eval.c:116)
==221==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==221== 
==221== 
==221== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==221==  Access not within mapped region at address 0x0
==221==    at 0x401A0C: is_straight_at (eval.c:107)
==221==    by 0x402968: describe_hand (test-eval.c:49)
==221==    by 0x402D0E: main (test-eval.c:116)
==221==  If you believe this happened as a result of a stack
==221==  overflow in your program's main thread (unlikely but
==221==  possible), you can try to increase the size of the
==221==  main thread stack using the --main-stacksize= flag.
==221==  The main thread stack size used in this run was 8388608.
==221== 
==221== HEAP SUMMARY:
==221==     in use at exit: 896 bytes in 18 blocks
==221==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==221== 
==221== LEAK SUMMARY:
==221==    definitely lost: 0 bytes in 0 blocks
==221==    indirectly lost: 0 bytes in 0 blocks
==221==      possibly lost: 0 bytes in 0 blocks
==221==    still reachable: 896 bytes in 18 blocks
==221==         suppressed: 0 bytes in 0 blocks
==221== Rerun with --leak-check=full to see details of leaked memory
==221== 
==221== For counts of detected and suppressed errors, rerun with: -v
==221== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==226== Memcheck, a memory error detector
==226== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==226== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==226== Command: ./test-eval inp.2.txt
==226== Parent PID: 225
==226== 
==226== Invalid read of size 8
==226==    at 0x401A09: is_straight_at (eval.c:107)
==226==    by 0x402968: describe_hand (test-eval.c:49)
==226==    by 0x402D0E: main (test-eval.c:116)
==226==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==226==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==226==    by 0x4010B5: add_card_to (deck-c4.c:29)
==226==    by 0x403592: hand_from_string (input.c:49)
==226==    by 0x402C93: main (test-eval.c:110)
==226== 
==226== Invalid read of size 4
==226==    at 0x401A0C: is_straight_at (eval.c:107)
==226==    by 0x402968: describe_hand (test-eval.c:49)
==226==    by 0x402D0E: main (test-eval.c:116)
==226==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==226== 
==226== 
==226== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==226==  Access not within mapped region at address 0x0
==226==    at 0x401A0C: is_straight_at (eval.c:107)
==226==    by 0x402968: describe_hand (test-eval.c:49)
==226==    by 0x402D0E: main (test-eval.c:116)
==226==  If you believe this happened as a result of a stack
==226==  overflow in your program's main thread (unlikely but
==226==  possible), you can try to increase the size of the
==226==  main thread stack using the --main-stacksize= flag.
==226==  The main thread stack size used in this run was 8388608.
==226== 
==226== HEAP SUMMARY:
==226==     in use at exit: 880 bytes in 17 blocks
==226==   total heap usage: 28 allocs, 11 frees, 9,272 bytes allocated
==226== 
==226== LEAK SUMMARY:
==226==    definitely lost: 0 bytes in 0 blocks
==226==    indirectly lost: 0 bytes in 0 blocks
==226==      possibly lost: 0 bytes in 0 blocks
==226==    still reachable: 880 bytes in 17 blocks
==226==         suppressed: 0 bytes in 0 blocks
==226== Rerun with --leak-check=full to see details of leaked memory
==226== 
==226== For counts of detected and suppressed errors, rerun with: -v
==226== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==231== Memcheck, a memory error detector
==231== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==231== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==231== Command: ./test-eval inp.3.txt
==231== Parent PID: 230
==231== 
==231== Invalid read of size 8
==231==    at 0x401A09: is_straight_at (eval.c:107)
==231==    by 0x402968: describe_hand (test-eval.c:49)
==231==    by 0x402D0E: main (test-eval.c:116)
==231==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==231==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==231==    by 0x4010B5: add_card_to (deck-c4.c:29)
==231==    by 0x403592: hand_from_string (input.c:49)
==231==    by 0x402C93: main (test-eval.c:110)
==231== 
==231== Invalid read of size 4
==231==    at 0x401A0C: is_straight_at (eval.c:107)
==231==    by 0x402968: describe_hand (test-eval.c:49)
==231==    by 0x402D0E: main (test-eval.c:116)
==231==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==231== 
==231== 
==231== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==231==  Access not within mapped region at address 0x0
==231==    at 0x401A0C: is_straight_at (eval.c:107)
==231==    by 0x402968: describe_hand (test-eval.c:49)
==231==    by 0x402D0E: main (test-eval.c:116)
==231==  If you believe this happened as a result of a stack
==231==  overflow in your program's main thread (unlikely but
==231==  possible), you can try to increase the size of the
==231==  main thread stack using the --main-stacksize= flag.
==231==  The main thread stack size used in this run was 8388608.
==231== 
==231== HEAP SUMMARY:
==231==     in use at exit: 864 bytes in 16 blocks
==231==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==231== 
==231== LEAK SUMMARY:
==231==    definitely lost: 0 bytes in 0 blocks
==231==    indirectly lost: 0 bytes in 0 blocks
==231==      possibly lost: 0 bytes in 0 blocks
==231==    still reachable: 864 bytes in 16 blocks
==231==         suppressed: 0 bytes in 0 blocks
==231== Rerun with --leak-check=full to see details of leaked memory
==231== 
==231== For counts of detected and suppressed errors, rerun with: -v
==231== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==236== Memcheck, a memory error detector
==236== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==236== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==236== Command: ./test-eval inp.4.txt
==236== Parent PID: 235
==236== 
==236== Invalid read of size 8
==236==    at 0x401A09: is_straight_at (eval.c:107)
==236==    by 0x402968: describe_hand (test-eval.c:49)
==236==    by 0x402D0E: main (test-eval.c:116)
==236==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==236==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==236==    by 0x4010B5: add_card_to (deck-c4.c:29)
==236==    by 0x403592: hand_from_string (input.c:49)
==236==    by 0x402C93: main (test-eval.c:110)
==236== 
==236== Invalid read of size 4
==236==    at 0x401A0C: is_straight_at (eval.c:107)
==236==    by 0x402968: describe_hand (test-eval.c:49)
==236==    by 0x402D0E: main (test-eval.c:116)
==236==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==236== 
==236== 
==236== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==236==  Access not within mapped region at address 0x0
==236==    at 0x401A0C: is_straight_at (eval.c:107)
==236==    by 0x402968: describe_hand (test-eval.c:49)
==236==    by 0x402D0E: main (test-eval.c:116)
==236==  If you believe this happened as a result of a stack
==236==  overflow in your program's main thread (unlikely but
==236==  possible), you can try to increase the size of the
==236==  main thread stack using the --main-stacksize= flag.
==236==  The main thread stack size used in this run was 8388608.
==236== 
==236== HEAP SUMMARY:
==236==     in use at exit: 896 bytes in 18 blocks
==236==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==236== 
==236== LEAK SUMMARY:
==236==    definitely lost: 0 bytes in 0 blocks
==236==    indirectly lost: 0 bytes in 0 blocks
==236==      possibly lost: 0 bytes in 0 blocks
==236==    still reachable: 896 bytes in 18 blocks
==236==         suppressed: 0 bytes in 0 blocks
==236== Rerun with --leak-check=full to see details of leaked memory
==236== 
==236== For counts of detected and suppressed errors, rerun with: -v
==236== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==241== Memcheck, a memory error detector
==241== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==241== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==241== Command: ./test-eval inp.5.txt
==241== Parent PID: 240
==241== 
==241== Invalid read of size 8
==241==    at 0x401A09: is_straight_at (eval.c:107)
==241==    by 0x402968: describe_hand (test-eval.c:49)
==241==    by 0x402D0E: main (test-eval.c:116)
==241==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==241==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==241==    by 0x4010B5: add_card_to (deck-c4.c:29)
==241==    by 0x403592: hand_from_string (input.c:49)
==241==    by 0x402C93: main (test-eval.c:110)
==241== 
==241== Invalid read of size 4
==241==    at 0x401A0C: is_straight_at (eval.c:107)
==241==    by 0x402968: describe_hand (test-eval.c:49)
==241==    by 0x402D0E: main (test-eval.c:116)
==241==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==241== 
==241== 
==241== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==241==  Access not within mapped region at address 0x0
==241==    at 0x401A0C: is_straight_at (eval.c:107)
==241==    by 0x402968: describe_hand (test-eval.c:49)
==241==    by 0x402D0E: main (test-eval.c:116)
==241==  If you believe this happened as a result of a stack
==241==  overflow in your program's main thread (unlikely but
==241==  possible), you can try to increase the size of the
==241==  main thread stack using the --main-stacksize= flag.
==241==  The main thread stack size used in this run was 8388608.
==241== 
==241== HEAP SUMMARY:
==241==     in use at exit: 864 bytes in 16 blocks
==241==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==241== 
==241== LEAK SUMMARY:
==241==    definitely lost: 0 bytes in 0 blocks
==241==    indirectly lost: 0 bytes in 0 blocks
==241==      possibly lost: 0 bytes in 0 blocks
==241==    still reachable: 864 bytes in 16 blocks
==241==         suppressed: 0 bytes in 0 blocks
==241== Rerun with --leak-check=full to see details of leaked memory
==241== 
==241== For counts of detected and suppressed errors, rerun with: -v
==241== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==246== Memcheck, a memory error detector
==246== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==246== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==246== Command: ./test-eval inp.6.txt
==246== Parent PID: 245
==246== 
==246== Invalid read of size 8
==246==    at 0x401811: is_straight_at (eval.c:83)
==246==    by 0x402931: describe_hand (test-eval.c:46)
==246==    by 0x402D0E: main (test-eval.c:116)
==246==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==246==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==246==    by 0x4010B5: add_card_to (deck-c4.c:29)
==246==    by 0x403592: hand_from_string (input.c:49)
==246==    by 0x402C93: main (test-eval.c:110)
==246== 
==246== Invalid read of size 4
==246==    at 0x401814: is_straight_at (eval.c:83)
==246==    by 0x402931: describe_hand (test-eval.c:46)
==246==    by 0x402D0E: main (test-eval.c:116)
==246==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==246== 
==246== 
==246== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==246==  Access not within mapped region at address 0x0
==246==    at 0x401814: is_straight_at (eval.c:83)
==246==    by 0x402931: describe_hand (test-eval.c:46)
==246==    by 0x402D0E: main (test-eval.c:116)
==246==  If you believe this happened as a result of a stack
==246==  overflow in your program's main thread (unlikely but
==246==  possible), you can try to increase the size of the
==246==  main thread stack using the --main-stacksize= flag.
==246==  The main thread stack size used in this run was 8388608.
==246== 
==246== HEAP SUMMARY:
==246==     in use at exit: 896 bytes in 18 blocks
==246==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==246== 
==246== LEAK SUMMARY:
==246==    definitely lost: 0 bytes in 0 blocks
==246==    indirectly lost: 0 bytes in 0 blocks
==246==      possibly lost: 0 bytes in 0 blocks
==246==    still reachable: 896 bytes in 18 blocks
==246==         suppressed: 0 bytes in 0 blocks
==246== Rerun with --leak-check=full to see details of leaked memory
==246== 
==246== For counts of detected and suppressed errors, rerun with: -v
==246== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==251== Memcheck, a memory error detector
==251== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==251== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==251== Command: ./test-eval inp.7.txt
==251== Parent PID: 250
==251== 
==251== Invalid read of size 8
==251==    at 0x401A09: is_straight_at (eval.c:107)
==251==    by 0x402968: describe_hand (test-eval.c:49)
==251==    by 0x402D0E: main (test-eval.c:116)
==251==  Address 0x5205858 is 0 bytes after a block of size 56 alloc'd
==251==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==251==    by 0x4010B5: add_card_to (deck-c4.c:29)
==251==    by 0x403592: hand_from_string (input.c:49)
==251==    by 0x402C93: main (test-eval.c:110)
==251== 
==251== Invalid read of size 4
==251==    at 0x401A0C: is_straight_at (eval.c:107)
==251==    by 0x402968: describe_hand (test-eval.c:49)
==251==    by 0x402D0E: main (test-eval.c:116)
==251==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==251== 
==251== 
==251== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==251==  Access not within mapped region at address 0x0
==251==    at 0x401A0C: is_straight_at (eval.c:107)
==251==    by 0x402968: describe_hand (test-eval.c:49)
==251==    by 0x402D0E: main (test-eval.c:116)
==251==  If you believe this happened as a result of a stack
==251==  overflow in your program's main thread (unlikely but
==251==  possible), you can try to increase the size of the
==251==  main thread stack using the --main-stacksize= flag.
==251==  The main thread stack size used in this run was 8388608.
==251== 
==251== HEAP SUMMARY:
==251==     in use at exit: 928 bytes in 20 blocks
==251==   total heap usage: 34 allocs, 14 frees, 9,456 bytes allocated
==251== 
==251== LEAK SUMMARY:
==251==    definitely lost: 0 bytes in 0 blocks
==251==    indirectly lost: 0 bytes in 0 blocks
==251==      possibly lost: 0 bytes in 0 blocks
==251==    still reachable: 928 bytes in 20 blocks
==251==         suppressed: 0 bytes in 0 blocks
==251== Rerun with --leak-check=full to see details of leaked memory
==251== 
==251== For counts of detected and suppressed errors, rerun with: -v
==251== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==256== Memcheck, a memory error detector
==256== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==256== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==256== Command: ./test-eval inp.8.txt
==256== Parent PID: 255
==256== 
==256== Invalid read of size 8
==256==    at 0x401A09: is_straight_at (eval.c:107)
==256==    by 0x402968: describe_hand (test-eval.c:49)
==256==    by 0x402D0E: main (test-eval.c:116)
==256==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==256==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==256==    by 0x4010B5: add_card_to (deck-c4.c:29)
==256==    by 0x403592: hand_from_string (input.c:49)
==256==    by 0x402C93: main (test-eval.c:110)
==256== 
==256== Invalid read of size 4
==256==    at 0x401A0C: is_straight_at (eval.c:107)
==256==    by 0x402968: describe_hand (test-eval.c:49)
==256==    by 0x402D0E: main (test-eval.c:116)
==256==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==256== 
==256== 
==256== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==256==  Access not within mapped region at address 0x0
==256==    at 0x401A0C: is_straight_at (eval.c:107)
==256==    by 0x402968: describe_hand (test-eval.c:49)
==256==    by 0x402D0E: main (test-eval.c:116)
==256==  If you believe this happened as a result of a stack
==256==  overflow in your program's main thread (unlikely but
==256==  possible), you can try to increase the size of the
==256==  main thread stack using the --main-stacksize= flag.
==256==  The main thread stack size used in this run was 8388608.
==256== 
==256== HEAP SUMMARY:
==256==     in use at exit: 896 bytes in 18 blocks
==256==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==256== 
==256== LEAK SUMMARY:
==256==    definitely lost: 0 bytes in 0 blocks
==256==    indirectly lost: 0 bytes in 0 blocks
==256==      possibly lost: 0 bytes in 0 blocks
==256==    still reachable: 896 bytes in 18 blocks
==256==         suppressed: 0 bytes in 0 blocks
==256== Rerun with --leak-check=full to see details of leaked memory
==256== 
==256== For counts of detected and suppressed errors, rerun with: -v
==256== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==261== Memcheck, a memory error detector
==261== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==261== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==261== Command: ./test-eval inp.9.txt
==261== Parent PID: 260
==261== 
==261== Invalid read of size 8
==261==    at 0x401811: is_straight_at (eval.c:83)
==261==    by 0x402931: describe_hand (test-eval.c:46)
==261==    by 0x402D0E: main (test-eval.c:116)
==261==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==261==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==261==    by 0x4010B5: add_card_to (deck-c4.c:29)
==261==    by 0x403592: hand_from_string (input.c:49)
==261==    by 0x402C93: main (test-eval.c:110)
==261== 
==261== Invalid read of size 4
==261==    at 0x401814: is_straight_at (eval.c:83)
==261==    by 0x402931: describe_hand (test-eval.c:46)
==261==    by 0x402D0E: main (test-eval.c:116)
==261==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==261== 
==261== 
==261== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==261==  Access not within mapped region at address 0x0
==261==    at 0x401814: is_straight_at (eval.c:83)
==261==    by 0x402931: describe_hand (test-eval.c:46)
==261==    by 0x402D0E: main (test-eval.c:116)
==261==  If you believe this happened as a result of a stack
==261==  overflow in your program's main thread (unlikely but
==261==  possible), you can try to increase the size of the
==261==  main thread stack using the --main-stacksize= flag.
==261==  The main thread stack size used in this run was 8388608.
==261== 
==261== HEAP SUMMARY:
==261==     in use at exit: 864 bytes in 16 blocks
==261==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==261== 
==261== LEAK SUMMARY:
==261==    definitely lost: 0 bytes in 0 blocks
==261==    indirectly lost: 0 bytes in 0 blocks
==261==      possibly lost: 0 bytes in 0 blocks
==261==    still reachable: 864 bytes in 16 blocks
==261==         suppressed: 0 bytes in 0 blocks
==261== Rerun with --leak-check=full to see details of leaked memory
==261== 
==261== For counts of detected and suppressed errors, rerun with: -v
==261== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==266== Memcheck, a memory error detector
==266== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==266== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==266== Command: ./test-eval inp.10.txt
==266== Parent PID: 265
==266== 
==266== Invalid read of size 8
==266==    at 0x401811: is_straight_at (eval.c:83)
==266==    by 0x402931: describe_hand (test-eval.c:46)
==266==    by 0x402D0E: main (test-eval.c:116)
==266==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==266==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==266==    by 0x4010B5: add_card_to (deck-c4.c:29)
==266==    by 0x403592: hand_from_string (input.c:49)
==266==    by 0x402C93: main (test-eval.c:110)
==266== 
==266== Invalid read of size 4
==266==    at 0x401814: is_straight_at (eval.c:83)
==266==    by 0x402931: describe_hand (test-eval.c:46)
==266==    by 0x402D0E: main (test-eval.c:116)
==266==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==266== 
==266== 
==266== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==266==  Access not within mapped region at address 0x0
==266==    at 0x401814: is_straight_at (eval.c:83)
==266==    by 0x402931: describe_hand (test-eval.c:46)
==266==    by 0x402D0E: main (test-eval.c:116)
==266==  If you believe this happened as a result of a stack
==266==  overflow in your program's main thread (unlikely but
==266==  possible), you can try to increase the size of the
==266==  main thread stack using the --main-stacksize= flag.
==266==  The main thread stack size used in this run was 8388608.
==266== 
==266== HEAP SUMMARY:
==266==     in use at exit: 896 bytes in 18 blocks
==266==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==266== 
==266== LEAK SUMMARY:
==266==    definitely lost: 0 bytes in 0 blocks
==266==    indirectly lost: 0 bytes in 0 blocks
==266==      possibly lost: 0 bytes in 0 blocks
==266==    still reachable: 896 bytes in 18 blocks
==266==         suppressed: 0 bytes in 0 blocks
==266== Rerun with --leak-check=full to see details of leaked memory
==266== 
==266== For counts of detected and suppressed errors, rerun with: -v
==266== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
